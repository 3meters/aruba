package com.proxibase.aircandi.components;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.regex.Pattern;

import android.graphics.Bitmap;
import android.os.CountDownTimer;
import android.os.Debug;

public class Utilities {

	public static final Pattern	EMAIL_ADDRESS						= Pattern.compile(
																			"[a-zA-Z0-9\\+\\.\\_\\%\\-\\+]{1,256}" +
																					"\\@" +
																					"[a-zA-Z0-9][a-zA-Z0-9\\-]{0,64}" +
																					"(" +
																					"\\." +
																					"[a-zA-Z0-9][a-zA-Z0-9\\-]{0,25}" +
																					")+"
																			);
	/**
	 * Regular expression to match all IANA top-level domains for WEB_URL.
	 * List accurate as of 2010/02/05. List taken from:
	 * http://data.iana.org/TLD/tlds-alpha-by-domain.txt
	 * This pattern is auto-generated by frameworks/base/common/tools/make-iana-tld-pattern.py
	 */
	public static final String	TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL	= "(?:"
																			+ "(?:aero|arpa|asia|a[cdefgilmnoqrstuwxz])"
																			+ "|(?:biz|b[abdefghijmnorstvwyz])"
																			+ "|(?:cat|com|coop|c[acdfghiklmnoruvxyz])"
																			+ "|d[ejkmoz]"
																			+ "|(?:edu|e[cegrstu])"
																			+ "|f[ijkmor]"
																			+ "|(?:gov|g[abdefghilmnpqrstuwy])"
																			+ "|h[kmnrtu]"
																			+ "|(?:info|int|i[delmnoqrst])"
																			+ "|(?:jobs|j[emop])"
																			+ "|k[eghimnprwyz]"
																			+ "|l[abcikrstuvy]"
																			+ "|(?:mil|mobi|museum|m[acdeghklmnopqrstuvwxyz])"
																			+ "|(?:name|net|n[acefgilopruz])"
																			+ "|(?:org|om)"
																			+ "|(?:pro|p[aefghklmnrstwy])"
																			+ "|qa"
																			+ "|r[eosuw]"
																			+ "|s[abcdeghijklmnortuvyz]"
																			+ "|(?:tel|travel|t[cdfghjklmnoprtvwz])"
																			+ "|u[agksyz]"
																			+ "|v[aceginu]"
																			+ "|w[fs]"
																			+ "|(?:xn\\-\\-0zwm56d|xn\\-\\-11b5bs3a9aj6g|xn\\-\\-80akhbyknj4f|xn\\-\\-9t4b11yi5a|xn\\-\\-deba0ad|xn\\-\\-g6w251d|xn\\-\\-hgbk6aj7f53bba|xn\\-\\-hlcj6aya9esc7a|xn\\-\\-jxalpdlp|xn\\-\\-kgbechtv|xn\\-\\-zckzah)"
																			+ "|y[etu]"
																			+ "|z[amw]))";
	public static final String	GOOD_IRI_CHAR						= "a-zA-Z0-9\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF";

	/**
	 * Regular expression pattern to match most part of RFC 3987
	 * Internationalized URLs, aka IRIs. Commonly used Unicode characters are
	 * added.
	 */
	public static final Pattern	WEB_URL								= Pattern
																			.compile("((?:(http|https|Http|Https|rtsp|Rtsp):\\/\\/(?:(?:[a-zA-Z0-9\\$\\-\\_\\.\\+\\!\\*\\'\\(\\)"
																					+ "\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2})){1,64}(?:\\:(?:[a-zA-Z0-9\\$\\-\\_"
																					+ "\\.\\+\\!\\*\\'\\(\\)\\,\\;\\?\\&\\=]|(?:\\%[a-fA-F0-9]{2})){1,25})?\\@)?)?"
																					+ "((?:(?:[" + GOOD_IRI_CHAR + "][" + GOOD_IRI_CHAR + "\\-]{0,64}\\.)+"   // named host
																					+ TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL
																					+ "|(?:(?:25[0-5]|2[0-4]" // or ip address
																					+ "[0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9])\\.(?:25[0-5]|2[0-4][0-9]"
																					+ "|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(?:25[0-5]|2[0-4][0-9]|[0-1]"
																					+ "[0-9]{2}|[1-9][0-9]|[1-9]|0)\\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}"
																					+ "|[1-9][0-9]|[0-9])))"
																					+ "(?:\\:\\d{1,5})?)" // plus option port number
																					+ "(\\/(?:(?:[" + GOOD_IRI_CHAR + "\\;\\/\\?\\:\\@\\&\\=\\#\\~"  // plus option query params
																					+ "\\-\\.\\+\\!\\*\\'\\(\\)\\,\\_])|(?:\\%[a-fA-F0-9]{2}))*)?"
																					+ "(?:\\b|$)");						// and finally, a word boundary or end of
																															// input.  This is to stop foo.sure from
																															// matching as foo.su

	public static class SimpleCountDownTimer extends CountDownTimer {

		private long	mMillisUntilFinished;

		public SimpleCountDownTimer(long millisInFuture) {
			this(millisInFuture, millisInFuture);
		}

		public SimpleCountDownTimer(long millisInFuture, long countDownInterval) {
			super(millisInFuture, countDownInterval);
			mMillisUntilFinished = millisInFuture;
		}

		@Override
		public void onFinish() {
			mMillisUntilFinished = 0;
		}

		@Override
		public void onTick(long millisUntilFinished) {
			mMillisUntilFinished = millisUntilFinished;
		}

		public long getMillisUntilFinished() {
			return mMillisUntilFinished;
		}
	}

	public static class Stopwatch {

		{
			Debug.startAllocCounting();
		}
		long	start	= System.nanoTime();

		void stop() {
			long elapsed = (System.nanoTime() - start) / 1000;
			Debug.stopAllocCounting();
			Logger.i(this, "CandiRadarActivity: " + elapsed + "us, "
					+ Debug.getThreadAllocCount() + " allocations, "
					+ Debug.getThreadAllocSize() + " bytes");
		}
	}

	public static final String md5(final String s) {
		try {
			// Create MD5 Hash
			MessageDigest digest = java.security.MessageDigest.getInstance("MD5");
			digest.update(s.getBytes());
			byte messageDigest[] = digest.digest();

			// Create Hex String
			StringBuffer hexString = new StringBuffer();
			for (int i = 0; i < messageDigest.length; i++) {
				String h = Integer.toHexString(0xFF & messageDigest[i]);
				while (h.length() < 2) {
					h = "0" + h;
				}
				hexString.append(h);
			}
			return hexString.toString();

		}
		catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		}
		return "";
	}

	public static final String md5HashForBitmap(Bitmap bitmap) {
		try {
			// Create MD5 Hash
			MessageDigest digest = java.security.MessageDigest.getInstance("MD5");
			byte[] bytes = ImageManager.byteArrayForBitmap(bitmap);
			digest.update(bytes);
			byte messageDigest[] = digest.digest();
			return messageDigest.toString();

			//			// Create Hex String
			//			StringBuffer hexString = new StringBuffer();
			//			for (int i = 0; i < messageDigest.length; i++) {
			//				String h = Integer.toHexString(0xFF & messageDigest[i]);
			//				while (h.length() < 2) {
			//					h = "0" + h;
			//				}
			//				hexString.append(h);
			//			}
			//			return hexString.toString();

		}
		catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		}
		return "";
	}

	public static Boolean validEmail(String email) {
		return EMAIL_ADDRESS.matcher(email).matches();
	}
	
	public static Boolean validWebUri(String webUri) {
		return WEB_URL.matcher(webUri).matches();
	}
}